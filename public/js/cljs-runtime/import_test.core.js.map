{"version":3,"sources":["import_test/core.cljs"],"mappings":"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","names":["js/import-test","js/import-test.core","js/import-test.core.session","import-test.core/session","reagent.core.atom","import-test.core/fetch-docs!","url","token","ajax.core.GET","response","cljs.core.swap_BANG_","cljs.core/assoc","p__38645","map__38646","cljs.core/--destructure-map","cljs.core.get","import-test.core/constraint->position","constraints","map__38647","vertical","horizontal","p__38648","map__38649","import-test.core/color->rgb","r","g","b","a","red","green","blue","p__38650","map__38651","import-test.core/color->hex","alpha","p__38652","map__38653","import-test.core/bounds->css","absoluteBoundingBox","absoluteRenderBox","parent-x","parent-y","map__38654","map__38655","xb","yb","hb","wb","xr","yr","hr","wr","top","left","cljs.core/not","p__38656","map__38657","import-test.core/gradient->css","gradientHandlePositions","gradientStops","map__38658","map__38659","map__38660","map__38661","map__38662","map__38663","xsh","ysh","cljs.core/first","xeh","yeh","cljs.core/second","xmh","ymh","cljs.core/last","s-position","s-color","m-position","m-color","e-position","e-color","ss-color","mm-color","ee-color","p__38664","map__38665","import-test.core/stroke->border","strokes","strokeWeight","strokeAlign","cljs.core/seq?","p__38666","map__38667","import-test.core/background->css","fills","color","import-test.core/borders","node","p__38668","map__38669","import-test.core/node->fonts","style","map__38670","px","ff","fw","fos","lih","h-align","v-align","les","clojure.string/lower-case","fs","ls","lh","import-test.core/convert-to-text","import-test.core/type->element","map__38672","id","p-x","p-y","type","parent-position","styles","cljs.core.apply","cljs.core/conj","render-child-fn","p__38673","map__38674","children","cljs.core/empty?","p1__38671#","cljs.core.map","G__38675","cljs.core.assoc","cljs.core.println","G__38676","cljs.core.dissoc","p__38677","map__38678","import-test.core/render-document","document","import-test.core/main","reagent.core.create_class","_","cljs.core/deref","js/document","p1__38679#","cljs.core/vals","import-test.core/init!","reagent.dom.render"],"sourcesContent":["(ns import-test.core\n  (:require [ajax.core :refer [GET]]\n            [clojure.string :as str]\n            [reagent.core :as r]\n            [reagent.dom :as rdom]))\n\n(defonce session (r/atom {}))\n\n\n(defn fetch-docs! [url token]\n  (GET (str url) {:handler (fn [response]\n                             (swap! session  assoc :api response))\n                  ;; :params {:ids \"771:41805\"}\n                  :response-format :json\n                  ;; :headers {:X-FIGMA-TOKEN (str \"figd_S6tiC_L9TQDKvKq1BUrrbC4AFUglk3W2QcudPEHa\")}\n                  :headers {:X-FIGMA-TOKEN (str token)}\n                  :keywords? true}))\n\n(defn constraint->position [{:keys [constraints]}]\n  (let [{vertical :verical\n         horizontal :horizontal} constraints]))\n\n(defn color->rgb [{:keys [r g b a]}]\n  (let [red (* (int r) 255)\n        green (* (int g) 255)\n        blue (* (int b) 255)]\n    (str \"rgba(\" (int red) \", \" (int green) \", \" (int blue) \", \" a \")\")))\n\n(defn color->hex [{:keys [r g b a]}]\n  (let [red (.toString ^js (int (* r 255)) 16)\n        green (.toString ^js (int (* g 255)) 16)\n        blue (.toString ^js (int (* b 255)) 16)\n        alpha (.toString ^js (int (* a 255)) 16)]\n    (str \"#\" red  green  blue  alpha)))\n\n\n;;  \"x\": -721.0,\n;;   \"y\": -1884.0,\n(defn bounds->css [{:keys [absoluteBoundingBox absoluteRenderBox parent-x parent-y]}]\n  (let [{xb :x yb :y hb :height wb :width} absoluteBoundingBox\n        {xr :x yr :y hr :height wr :width} absoluteBoundingBox\n        top (- yb parent-y)\n        left (- xb parent-x)]\n    {:position (if-not parent-x \"absolute\" \"absolute\") :height (str hb \"px\") :width (str wb \"px\") :top (str top \"px\") :left (str left \"px\")}))\n\n(defn gradient->css [{:keys [gradientHandlePositions gradientStops]}]\n  (let [{xsh :x ysh :y} (first gradientHandlePositions)\n        {xeh :x yeh :y} (second gradientHandlePositions)\n        {xmh :x ymh :y} (last gradientHandlePositions)\n\n        {s-position :position s-color :color} (first gradientStops)\n        {m-position :position m-color :color} (second gradientStops)\n        {e-position :position e-color :color} (last gradientStops)\n        ss-color (color->hex s-color)\n        mm-color (color->hex m-color)\n        ee-color (color->hex e-color)]\n    ;; (println ss-color)\n    {:background (str \"linear-gradient(\" 90 \"deg, \" ss-color \" \" (* 100 s-position) \"%, \" mm-color \" \" (* 100 m-position) \"%, \" ee-color \" \" (* 100 e-position) \"%\")}))\n\n(defn stroke->border [{:keys [strokes strokeWeight strokeAlign]}]\n  (if (seq? strokes)\n    ()\n    {:border (str \"\\\"\" strokeWeight \"px solid black\\\"\")}))\n\n(defn background->css [{:keys [fills]}]\n  (let [color (color->hex (-> fills first :color))]\n    ;; (println color)\n    {:background (str color)}))\n\n(defn borders [node]\n  {:border-radius (str (:cornerRadius node) \"px\")})\n\n(defn node->fonts [{:keys [style]}]\n  (let [{px :lineHeightUnit\n         ff :fontFamily\n         fw :fontWeight\n         fos :fontSize\n         lih :lineHeightPx\n         h-align :textAlignHorizontal\n         v-align :textAlignVertical\n         les :letterSpacing} style\n        px (str/lower-case px)\n        h-align (str/lower-case h-align)\n        v-align (str/lower-case v-align)\n        fs (str fos px)\n        ls (str les px)\n        lh (str lih px)]\n    {:display \"inline\" :font-size fs :letter-spacing ls :font-family ff :font-weight fw :line-height lh :align h-align :vertical-align v-align}))\n\n(defn convert-to-text [node])\n\n\n(defn type->element [node]\n  (let [{id :id\n\n         p-x :parent-x\n         p-y :parent-y\n\n         type :type\n         parent-position :absoluteBoundingBox} node\n;; (gradient->css (-> node :fills last))\n        styles (apply conj (background->css node)  (borders node) (bounds->css node))\n\n        render-child-fn (fn [{:keys [children]}]\n                          (if-not (empty? children)\n                            (map #(type->element (assoc % :parent-x (:x parent-position) :parent-y (:y parent-position))) children)))]\n    (println (node->fonts node))\n\n    (case type\n      \"DOCUMENT\" [:<> {:id id} (render-child-fn node)]\n      \"COMPONENT\" [:div {:key id\n                         :id id\n                         :style (-> styles (dissoc :top :left))} (render-child-fn node)]\n      \"RECTANGLE\" [:div {:key id\n                         :id id\n                         :style styles} (render-child-fn node)]\n      \"TEXT\" [:span {:key id\n                     :id id\n                     :style (apply conj styles (node->fonts node))} (render-child-fn node) (:name node)]\n      \"GROUP\" [:div {:key id\n                     :id id\n                     :style styles} (render-child-fn node)]\n      \"FRAME\" [:div {:key id\n                     :id id\n                     :style styles} (render-child-fn node)]\n      \"VECTOR\" [:div {:key id\n                      :id id\n                      :style styles} (render-child-fn node)]\n      \"ELLIPSE\" [:div {:key id\n                       :id id\n                       :style styles} (render-child-fn node)]\n      \"LINE\" [:div {:key id\n                    :id id\n                    :style styles} (render-child-fn node)]\n      [:span {:key id\n              :id id}\n       (str type)])))\n\n(defn render-document [{:keys [document]}]\n  (type->element document))\n\n\n\n(defn main []\n  (r/create-class {:reagent-render (fn [_]\n                                     [:<>\n                                      (when-not (:api @session) [:div {:class \"modal hide\"}\n                                                                 [:div {:class \"dialog\"}\n                                                                  [:div {:class \"flex-div\"}\n                                                                   [:input {:type \"text\" :id \"url\" :class \"input\" :placeholder \"Type the url here\"}]\n                                                                   [:input {:type \"text\" :id \"token\" :class \"input\" :placeholder \"X-FIGMA-TOKEN\"}]]\n                                                                  [:button {:on-click #(fetch-docs! (.-value (.getElementById js/document \"url\")) (.-value (.getElementById js/document \"token\")))\n                                                                            :class \"button\"} \"Import\"]]])\n                                      [:div (when (:api @session)\n                                              (map #(render-document %) (-> @session :api :nodes vals)))]])}))\n\n\n(defn ^:dev/after-load init! []\n  (rdom/render [main] (.getElementById js/document  \"app\")))\n"]}